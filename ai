/blockchain-project
  /src
    - main.py
    - blockchain.py
    - transaction.py
  - README.md
# main.py
from blockchain import Blockchain
from transaction import Transaction

# Create a blockchain
my_blockchain = Blockchain()

# Create transactions
transaction1 = Transaction("sender1", "recipient1", 1.5)
transaction2 = Transaction("sender2", "recipient2", 3.0)

# Add transactions to the blockchain
my_blockchain.add_transaction(transaction1)
my_blockchain.add_transaction(transaction2)

# Mine a block
my_blockchain.mine_block()

# Display the blockchain
print("Blockchain:")
print(my_blockchain.get_chain())
# blockchain.py
import hashlib
import time

class Blockchain:
    def __init__(self):
        self.chain = []
        self.transactions = []

        # Create the genesis block
        self.add_block(previous_hash="1")

    def add_block(self, previous_hash):
        # Create a block with the given previous hash and current transactions
        block = {
            "index": len(self.chain) + 1,
            "timestamp": time.time(),
            "transactions": self.transactions,
            "previous_hash": previous_hash,
        }

        # Reset the current list of transactions
        self.transactions = []

        # Add the block to the chain
        self.chain.append(block)
        return block

    def add_transaction(self, transaction):
        # Add a new transaction to the list
        self.transactions.append({
            "sender": transaction.sender,
            "recipient": transaction.recipient,
            "amount": transaction.amount,
        })

    def mine_block(self):
        # Get the last block's hash
        previous_hash = self.hash_block(self.chain[-1])

        # Add a new block to the chain
        new_block = self.add_block(previous_hash)

        print(f"Block #{new_block['index']} mined!")

    def hash_block(self, block):
        # Hash the block using SHA-256
        block_string = str(block)
        return hashlib.sha256(block_string.encode()).hexdigest()

    def get_chain(self):
        return self.chain
